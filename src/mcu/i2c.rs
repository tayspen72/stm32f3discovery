//==============================================================================
// Notes
//==============================================================================
// mcu/i2c.rs

//==============================================================================
// Crates and Mods
//==============================================================================
use core::cell::RefCell;
// use core::ops::DerefMut;
use cortex_m::interrupt::{free, Mutex};
use stm32f3::stm32f303;

//==============================================================================
// Enums, Structs, and Types
//==============================================================================


//==============================================================================
// Variables
//==============================================================================
static I2C1_HANDLE: Mutex<RefCell<Option<stm32f303::I2C1>>> = 
	Mutex::new(RefCell::new(None));
static I2C2_HANDLE: Mutex<RefCell<Option<stm32f303::I2C2>>> = 
	Mutex::new(RefCell::new(None));
static I2C3_HANDLE: Mutex<RefCell<Option<stm32f303::I2C3>>> = 
	Mutex::new(RefCell::new(None));

//==============================================================================
// Public Functions
//==============================================================================
pub fn init(
	i2c1: stm32f303::I2C1,
	i2c2: stm32f303::I2C2,
	i2c3: stm32f303::I2C3) {
	
	free(|cs| I2C1_HANDLE.borrow(cs).replace(Some(i2c1)));
	free(|cs| I2C2_HANDLE.borrow(cs).replace(Some(i2c2)));
	free(|cs| I2C3_HANDLE.borrow(cs).replace(Some(i2c3)));
}

//==============================================================================
// Private Functions
//==============================================================================


//==============================================================================
// Task Handler
//==============================================================================
pub fn task_handler() {

}